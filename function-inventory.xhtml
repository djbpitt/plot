<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <title>Function inventory</title>
      <link type="text/css"
            rel="stylesheet"
            href="http://www.obdurodon.org/css/style.css"/>
   </head>
   <body>
      <h1>Function inventory</h1>
      <hr/>
      <section id="plot-lib">
         <h2>Package: plot-lib</h2>
         <p>
            <strong>Location: </strong>
            <em>lib/plot-lib.xsl</em>
         </p>
         <dl>
            <h3>Final</h3>
            <dt>
               <code>djb:expand-to-tenths</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Convert integer range to range of tenths</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:half as xs:integer</code>)</li>
                  <li>
                     <strong>Note: </strong>Can be used to approximate a curve by plotting intermediate values with fine
                    granularity. The input, a positive integer, is the upper bound of the desired
                    symmetrical range, centered on 0. Can be recentered with
                        <code>djb:recenter()</code>.</li>
               </ul>
            </dd>
            <dt>
               <code>djb:gaussian</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Gaussian Y value corresponding to input X</li>
                  <li>
                     <strong>Arity: </strong>4 (<code>$f:x as xs:double</code>, <code>$f:peak as xs:double</code>,
                        <code>$f:center as xs:double</code>, <code>$f:stddev as
                    xs:double</code>
                  </li>
                  <li>
                     <strong>Note: </strong>
                     <code>$f:center</code> is the mean, <code>$f:peak</code> is the height at the
                    mean. Used by <code>djb:get-gaussian-weights()</code>, which is used by
                        <code>djb:get-weights-scale()</code>. Public so that we can also draw a
                    Gaussian curve directly.</li>
               </ul>
            </dd>
            <dt>
               <code>djb:get-weights-scale</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Return sequence of scaling values for different smoothing
                    kernels</li>
                  <li>
                     <strong>Arity: </strong>3 (<code>$f:kernal as xs:string ()</code>, <code>$f:window-size as
                        xs:integer</code>, <code>$f:stddev as xs:integer</code>). 2 (omits gaussian
                    kernel and <code>$f:stddev</code>).</li>
               </ul>
            </dd>
            <dt>
               <code>djb:random-sequence</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Create a specified number of random doubles between 0 and
                    1</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:count as xs:integer</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:recenter</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Adjust a recenter sequence of doubles, returned rescaled
                    sequence</li>
                  <li>
                     <strong>Arity: </strong>3 (<code>$f:input-values as xs:double+</code>, <code>$f:new-min as
                        xs:double</code>, <code>$f:new-max as xs:double</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:round-to-odd</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Found even integer up to odd, return odd unchanged</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:input as xs:integer</code>)</li>
                  <li>
                     <strong>Note: </strong>Window size for smoothing must be odd. If it is computed from data (e.g.,
                        <code>n idiv 3</code>), this ensures that the value is always a positive odd
                    integer.</li>
               </ul>
            </dd>
            <dt>
               <code>djb:split-points</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Split SVG <code>@points</code> into individual strings for each
                    point</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:points as xs:string</code>)</li>
                  <li>
                     <strong>Note: </strong>Is this used? If not, remove.</li>
               </ul>
            </dd>
            <dt>
               <code>djb:uniform</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>True iff all items in sequence are equal</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:seq as item()+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:validate-points</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Validate cardinality and lexical form of input points: 1) At least
                    three points, 2) lexical form <code>X,Y</code>, 3) monotonic X</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:points as xs:string+</code>&gt;</li>
                  <li>
                     <strong>Note: </strong>The individual points are validated by calling
                        <code>djb:validate-point()</code>.</li>
               </ul>
            </dd>
            <dt>
               <code>djb:weighted-average</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Smoothed value for current point</li>
                  <li>
                     <strong>Arity: </strong>4 (<code>$f:focus as xs:integer</code>, <code>$f:window-size as
                        xs:integer</code>, <code>$f:input-values as xs:double+</code>,
                        <code>$f:weights as xs:double+</code>)</li>
                  <li>
                     <strong>Note: </strong>
                     <code>$f:weights</code> are created separately because
                        <code>djb:weighted-average()</code> is called for every point, and weights
                    need to be computed only once for the entire set of points. Modify this to
                    create smoothed values for all points as a single call, in which case it can
                    call <code>djb:get-weights-scale()</code> directly, and only once?</li>
               </ul>
            </dd>
            <h3>Private</h3>
            <dt>
               <code>djb:gaussian-weights</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Sequence of values for Gaussian weighting</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:window-size as xs:integer</code>, <code>$f:stddev as
                        xs:double</code>)</li>
                  <li>
                     <strong>Note: </strong>Mean = 0, peak = 1. Calls <code>djb:gaussian()</code> to create each. Can be
                    consolidated if creation of weighting scale is folded into weighting of points,
                    processing the whole sequence at once.</li>
               </ul>
            </dd>
            <dt>
               <code>djb:monotonic-X</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>True iff X values of <code>X,Y</code> points are monotonic. Uses
                        <code>djb:monotonic()</code>.</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:input-points as xs:string+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:validate-monotonic</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>True iff sequence is monotonic (in either direction)</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:seq as xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:validate-point-regex</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Validate a single point against <code>X,Y</code> regex, where
                        <code>X</code> and <code>Y</code> are doubles with optional
                    signs</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:input-point as xs:string</code>)</li>
                  <li>
                     <strong>Note: </strong>Validates point against regex: X and Y are floats with optional signs. Point
                    must be in <code>X,Y</code> form. Uses <code>djb:validate-point-regex()</code>
                    to validate each half; this function verifies that the pair is lexically
                    well-formed.</li>
               </ul>
            </dd>
         </dl>
      </section>
      <hr/>
      <section id="linear-algebra">
         <h2>Package: linear-algebra</h2>
         <p>
            <strong>Location: </strong>
            <em>linear-algebra/linear-algebra-lib.xsl</em>
         </p>
         <p>
            <strong>Imports: </strong>
            <em>plot-lib</em>
         </p>
         <dl>
            <h3>Final</h3>
            <dt>
               <code>djb:compute-control-X</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute X coordinate of quadratic Bézier control point for parabolic
                    segment</li>
                  <li>
                     <strong>Arity: </strong>2 (<code>$f:x1 as xs:double</code>, <code>$f:x2 as xs:double</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:compute-control-Y</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute Y coordinate of quadratic Bézier control point for parabolic
                    segment</li>
                  <li>
                     <strong>Arity: </strong>5 (<code>$f:x1 as xs:double</code>, <code>$f:x2 as xs:double</code>,
                        <code>$f:a as xs:double</code>, <code>$f:b as xs:double</code>, <code>$f:c
                        as xs:double</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:compute-derivative</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute first derivative of quadratic function</li>
                  <li>
                     <strong>Arity: </strong>3 (<code>$f:x as xs:double</code>, <code>$f:a as xs:double</code>, <code>$f:b
                        as xs:double</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:compute-parabolic-Y</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute parabolic Y coordinate from X and quadratic
                    parameters</li>
                  <li>
                     <strong>Arity: </strong>4 (<code>$f:x as xs:double</code>, <code>$f:a as xs:double</code>, <code>$f:b
                        as xs:double</code>, <code>$f:c as xs:double</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:compute-vertex-X</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute X coordinate of vertex of parabola, given quadratic
                    equation</li>
                  <li>
                     <strong>Arity: </strong>3 (<code>$f:a as xs:double</code>, <code>$f:b as xs:double</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:dot-product</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute dot product of two matrices</li>
                  <li>
                     <strong>Arity: </strong>2 (<code>$f:left-matrix as array(*)</code>, <code>$f:right-matrix as
                        array(*)</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:transpose-matrix</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Transpose matrix (swap rows and columns)</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:input-matrix as array()</code>)</li>
               </ul>
            </dd>
         </dl>
      </section>
      <hr/>
      <section id="regression">
         <h2>Package: regression</h2>
         <p>
            <strong>Location: </strong>
            <em>regression/regression.xsl</em>
         </p>
         <p>
            <strong>Imports: </strong>
            <em>plot-lib, linear-algebra-lib</em>
         </p>
         <dl>
            <h3>Final</h3>
            <dt>
               <code>djb:compute-regression-parameters</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute parameters for quadratic (parabolic) equation given all
                    points</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:points as xs:string+</code>)</li>
                  <li>
                     <strong>Note: </strong>Call only from <code>djb:regression-line()</code>; don’t expose?</li>
               </ul>
            </dd>
            <dt>
               <code>djb:plot-parabolic-segment</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Plot parabolic segment as SVG <code>&lt;path&gt;</code>
                    element</li>
                  <li>
                     <strong>Arity: </strong>5 (<code>$f:x1 as xs:double</code>, <code>$f:x2 as xs:double</code>
                     <code>$f:a as xs:double</code>, <code>$f:b as xs:double</code>, <code>$f:c as
                        xs:double</code>)</li>
                  <li>
                     <strong>Note: </strong>Change API to pass in all points plus minX and maxX and call
                        <code>djb:regression-line()</code> to compute the parameters for the
                    quadratic equation?</li>
               </ul>
            </dd>
            <dt>
               <code>djb:regression-line</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Plot regression line</li>
                  <li>
                     <strong>Arity: </strong>2: (<code>$f:point-pairs as xs:string+</code>, <code>$f:debug as
                        xs:boolean</code>). 1: omit <code>$f:debug</code>.</li>
                  <li>
                     <strong>Note: </strong>Currently plots from minX to minY. Change to specify endpoints of line, to
                    match parabolic plotting?</li>
               </ul>
            </dd>
         </dl>
      </section>
      <hr/>
      <section id="smoothing">
         <h2>Package: smoothing</h2>
         <p>
            <strong>Location: </strong>
            <em>smoothing/smoothing.xsl</em>
         </p>
         <p>
            <strong>Imports: </strong>
            <em>plot-lib</em>
         </p>
         <dl>
            <h3>Final</h3>
            <dt>
               <code>djb:smoothing</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Adjust Y values with rectangular kernel according to window
                    specification</li>
                  <li>
                     <strong>Arity: </strong>2 (<code>$f:points as xs:string+</code>), <code>$f:window as
                        xs:integer</code>. 1 supplies default window of 3.</li>
                  <li>
                     <strong>Note: </strong>Remove this, merging rectangular kernel in with others</li>
               </ul>
            </dd>
         </dl>
      </section>
      <hr/>
      <section id="spline">
         <h2>Package: spline</h2>
         <p>
            <strong>Location: </strong>
            <em>spline/spline.xsl</em>
         </p>
         <p>
            <strong>Imports: </strong>
            <em>plot-lib</em>
         </p>
         <dl>
            <h3>Final</h3>
            <dt>
               <code>djb:spline</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Plot spline as SVG <code>&lt;path&gt;</code> element. If
                        <code>$f:debug</code> is set, also plots debugging artifacts.</li>
                  <li>
                     <strong>Arity: </strong>3 (<code>$f:point-pairs as xs:string+</code>, <code>$f:scaling as
                        xs:double</code>, <code>$f:debug as xs:boolean</code>). 2 version defaults
                        <code>$f:debug</code> to false. 1 version defaults <code>$f:scaling</code>
                    to 0.4.</li>
               </ul>
            </dd>
            <h3>Private</h3>
            <dt>
               <code>djb:create-anchor1-Xs</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute X coordinate for incoming handles</li>
                  <li>
                     <strong>Arity: </strong>3 (<code>$f:xPoints as xs:double</code>, <code>$f:angle1s as
                        xs:double+</code>, <code>$f:in-anchor-lengths as xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-anchor1-Ys</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute Y coordinate for incoming handles</li>
                  <li>
                     <strong>Arity: </strong>3 (<code>$f:yPoints as xs:double</code>, <code>$f:angle1s as
                        xs:double+</code>, <code>$f:in-anchor-lengths as xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-anchor2-Xs</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute X coordinate for outgoing handles</li>
                  <li>
                     <strong>Arity: </strong>3 (<code>$f:xPoints as xs:double</code>, <code>$f:angle2s as
                        xs:double+</code>, <code>$f:out-anchor-lengths as xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-anchor2-Ys</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute Y coordinate for outgoing handles</li>
                  <li>
                     <strong>Arity: </strong>3 (<code>$f:yPoints as xs:double</code>, <code>$f:angle2s as
                        xs:double+</code>, <code>$f:out-anchor-lengths as xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-angle1s</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute angle for incoming handles</li>
                  <li>
                     <strong>Arity: </strong>2 (<code>$f:normal1-Ys as xs:double+</code>, <code>$f:normal1-Xs as
                        xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-angle2s</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute angle for outgoing handles</li>
                  <li>
                     <strong>Arity: </strong>2 (<code>$f:normal2-Ys as xs:double+</code>, <code>$f:normal2-Xs as
                        xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-diagnostics</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Output HTML table with diagnostic information if <code>$f:debug</code>
                    is set</li>
                  <li>
                     <strong>Arity: </strong>19 (<code>$f:dir-Xs as xs:double+</code>, <code>$f:dir-Ys as
                        xs:double+</code>, <code>$f:lengths as xs:double+</code>, <code>$f:unit-Xs
                        as xs:double+</code>, <code>$f:unit-Ys as xs:double+</code>,
                        <code>$f:normal1-Xs as xs:double+</code>, <code>$f:normal1-Ys as
                        xs:double+</code>, <code>$f:normal2-X2 as xs:double+</code>,
                        <code>$f:normal2-Y2 as xs:double+</code>, <code>$f:angle1s as
                        xs:double+</code>, <code>$f:angle2s as xs:double+</code>,
                        <code>$f:anchor1-Xs as xs:double+</code>, <code>$f:anchor1-Ys as
                        xs:double+</code>, <code>$f:anchor2-Xs as xs:double+</code>,
                        <code>$f:anchor2-Ys as xs:double+</code>, <code>$f:total-anchorlengths as
                        xs:double+</code>, <code>$f:in-anchor-lengths as xs:double+</code>,
                        <code>$f:out-anchor-lengths as xs:double+</code>, <code>$f:scaling as
                        xs:double+</code>, )</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-dir-Xs</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute X distances between alternate points, for joining
                    lines</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:Xs as xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-dir-Ys</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute Y distances between alternate points, for joining
                    lines</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:Ys as xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-in-anchor-lengths</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute lengths of incoming handles</li>
                  <li>
                     <strong>Arity: </strong>2 (<code>$f:total-anchor-lengths as xs:double+</code>, <code>$f:seg-lengths
                        as xs:double+</code>)</li>
                  <li>
                     <strong>Note: </strong>Refactor to <code>for-each-pair()</code>?</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-lengths</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute lengths of joining lines</li>
                  <li>
                     <strong>Arity: </strong>2 (<code>$f:dir-Xs as xs:double+</code>, <code>$f:dir-Ys as
                    xs:double</code>)</li>
                  <li>
                     <strong>Note: </strong>Refactor to <code>for-each-pair()</code>?</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-normal1-Xs</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute X coordinates of endpoint 1 of normals</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:unit-Ys as xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-normal1-Ys</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute Y coordinates of endpoint 1 of normals</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:unit-Xs as xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-normal2-Xs</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute X coordinates of endpoint 2 of normals</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:unit-Ys as xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-normal2-Ys</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute Y coordinates of endpoint 2 of normals</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:unit-Xs as xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-out-anchor-lengths</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute lengths of outgoing handles</li>
                  <li>
                     <strong>Arity: </strong>2 (<code>$f:total-anchor-lengths as xs:double+</code>, <code>$f:seg-lengths
                        as xs:double+</code>)</li>
                  <li>
                     <strong>Note: </strong>Refactor to <code>for-each-pair()</code>?</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-seg-lengths</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute diagonal distance between adjacent knots</li>
                  <li>
                     <strong>Arity: </strong>2 (<code>$f:xLengths as xs:double+</code>, <code>$f:yLengths as
                        xs:double+</code>
                  </li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-total-anchor-lengths</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute length of control line</li>
                  <li>
                     <strong>Arity: </strong>2 (<code>$f:lengths as xs:double+</code>, <code>$f:scaling as
                        xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-unit-Xs</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute unit X values</li>
                  <li>
                     <strong>Arity: </strong>2 (<code>$f:dir-Xs as xs:double+</code>, <code>$f:lengths as
                        xs:double+</code>)</li>
                  <li>
                     <strong>Note: </strong>Refactor to use <code>for-each-pair()</code>?</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-unit-Ys</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute unit X values</li>
                  <li>
                     <strong>Arity: </strong>2 (<code>$f:dir-Ys as xs:double+</code>, <code>$f:lengths as
                        xs:double+</code>)</li>
                  <li>
                     <strong>Note: </strong>Refactor to use <code>for-each-pair()</code>?</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-xLengths</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute X distances between adjacent knots</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:xPoints as xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:create-yLengths</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Compute X distances between adjacent knots</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:yPoints as xs:double+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:extract-Xs</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Extract all X values from point pairs</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:point-pairs as xs:string+</code>)</li>
               </ul>
            </dd>
            <dt>
               <code>djb:extract-Ys</code>
            </dt>
            <dd>
               <ul>
                  <li>
                     <strong>Description: </strong>Extract all Y values from point pairs</li>
                  <li>
                     <strong>Arity: </strong>1 (<code>$f:point-pairs as xs:string+</code>)</li>
               </ul>
            </dd>
         </dl>
      </section>
   </body>
</html>
