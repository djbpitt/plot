<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:djb="http://www.obdurodon.org"
    xmlns:f="http://www.obdurodon.org/function-variables" stylesheet="plot-lib.xsl"
    run-as="external">

    <x:scenario label="Scenarios for testing function validate-points">
        <x:call function="djb:validate-points"/>
        <x:scenario label="with valid input (at least three, no white-space, monotonic X)">
            <x:call>
                <x:param name="f:point-pairs" select="'1,2', '3,4', '5,6'"/>
            </x:call>
            <x:expect
                label="Valid points (at least three, correct format, no white-space) should pass"
                select="true()"/>
        </x:scenario>
        <x:scenario label="with too few points">
            <x:call>
                <x:param name="f:point-pairs" select="'1,2', '3,4'"/>
            </x:call>
            <x:expect label="Fewer than three points should fail" select="false()"/>
        </x:scenario>
        <x:scenario label="with non-monotonic X">
            <x:call>
                <x:param name="f:point-pairs" select="'1,2', '5,4', '3,6'"/>
            </x:call>
            <x:expect label="Non-monotonic X should fail" select="false()"/>
        </x:scenario>
        <x:scenario label="with incorrect white-space">
            <x:call>
                <x:param name="f:point-pairs" select="'1, 2', '3,4', '5,6'"/>
            </x:call>
            <x:expect label="White space inside point should fail" select="false()"/>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Scenario for testing function random-sequence">
        <x:call function="djb:random-sequence">
            <x:param name="count" select="100"/>
        </x:call>
        <x:expect label="Count should equal 100, ranging between 0 and 1"
            test="count($x:result) eq 100 and min($x:result) gt 0 and max($x:result) lt 1"/>
    </x:scenario>

    <x:scenario label="Scenarios for testing function get-weights-scale#3">
        <x:variable name="djb:window-size" as="xs:integer" select="17"/>
        <x:call function="djb:get-weights-scale"/>
        <x:scenario label="with Gaussian kernel">
            <x:call>
                <x:param name="f:kernel" select="'gaussian'"/>
                <x:param name="f:window-size" select="$djb:window-size"/>
                <x:param name="f:stddev" select="5"/>
            </x:call>
            <x:expect label="desending Gaussian values (n = window-size + 1)"
                select="
                1, 
                0.9801986733067553, 
                0.9231163463866358, 
                0.835270211411272, 
                0.7261490370736909, 
                0.6065306597126334, 
                0.4867522559599717, 
                0.37531109885139957, 
                0.27803730045319414, 
                0.19789869908361465, 
                0.1353352832366127, 
                0.08892161745938634, 
                0.056134762834133725, 
                0.034047454734599344, 
                0.019841094744370288, 
                0.011108996538242306, 
                0.005976022895005943, 
                0.0030887154082367687
                "
            />
        </x:scenario>
        <x:scenario label="with rectangular kernel">
            <x:call>
                <x:param name="f:kernel" select="'rectangular'"/>
                <x:param name="f:window-size" select="$djb:window-size"/>
                <x:param name="f:stddev" select="5"/>
            </x:call>
            <x:expect label="rectangular values (n = window-size + 1)"
                select="
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
                "
            />
        </x:scenario>
        <x:scenario label="with exponential kernel">
            <x:call>
                <x:param name="f:kernel" select="'exponential'"/>
                <x:param name="f:window-size" select="$djb:window-size"/>
                <x:param name="f:stddev" select="5"/>
            </x:call>
            <x:expect label="exponential values"
                select="
                    1,
                    0.5,
                    0.25,
                    0.125,
                    0.0625,
                    0.03125,
                    0.015625,
                    0.0078125,
                    0.00390625,
                    0.001953125,
                    0.0009765625,
                    0.00048828125,
                    0.000244140625,
                    0.0001220703125,
                    0.00006103515625,
                    0.000030517578125,
                    0.0000152587890625,
                    0.00000762939453125
                    "
            />
        </x:scenario>
        <x:scenario label="with parabolic-up kernel">
            <x:call>
                <x:param name="f:kernel" select="'parabolic-up'"/>
                <x:param name="f:window-size" select="$djb:window-size"/>
                <x:param name="f:stddev" select="5"/>
            </x:call>
            <x:expect label="parabolic values, opening up"
                select="
                1,
                0.8858131487889274,
                0.7785467128027681,
                0.6782006920415224,
                0.5847750865051903,
                0.4982698961937717,
                0.41868512110726647,
                0.34602076124567477,
                0.28027681660899656,
                0.22145328719723184,
                0.1695501730103806,
                0.12456747404844293,
                0.08650519031141869,
                0.05536332179930796,
                0.031141868512110732,
                0.01384083044982699,
                0.0034602076124567475,
                0
                "
            />
        </x:scenario>
        <x:scenario label="with parabolic-down kernel">
            <x:call>
                <x:param name="f:kernel" select="'parabolic-down'"/>
                <x:param name="f:window-size" select="$djb:window-size"/>
                <x:param name="f:stddev" select="5"/>
            </x:call>
            <x:expect label="parabolic values, opening down"
                select="
                1,
                0.9965397923875432,
                0.986159169550173,
                0.9688581314878892,
                0.9446366782006921,
                0.9134948096885813,
                0.8754325259515571,
                0.8304498269896194,
                0.7785467128027681,
                0.7197231833910034,
                0.6539792387543253,
                0.5813148788927336,
                0.5017301038062283,
                0.4152249134948097,
                0.32179930795847755,
                0.2214532871972319,
                0.11418685121107264,
                0
                "
            />
        </x:scenario>
        <x:scenario label="with invalid kernel" catch="yes">
            <!-- Trap error on invalid kernel type -->
            <x:call>
                <x:param name="f:kernel" select="'dummy'"/>
                <x:param name="f:window-size" select="$djb:window-size"/>
                <x:param name="f:stddev" select="5"/>
            </x:call>
            <x:expect label="err:description" test="$x:result?err?description"
                select="'Invalid kernel type: dummy; must be one of: gaussian, rectangular, exponential, parabolic-up, or parabolic-down'"
            />
        </x:scenario>
        <x:scenario label="with invalid window-size" catch="yes">
            <!-- Trap error on invalid window size (even value; odd required) -->
            <x:call>
                <x:param name="f:kernel" select="'gaussian'"/>
                <x:param name="f:window-size" select="10"/>
                <x:param name="f:stddev" select="5"/>
            </x:call>
            <x:expect label="err:description" test="$x:result?err?description"
                select="'Invalid window size: 10; window size must be odd integer greater than 3'"/>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Scenario for testing function get-weights-scale#2 with Gaussian kernel">
        <x:variable name="djb:window-size" as="xs:integer" select="17"/>
        <x:call function="djb:get-weights-scale">
            <x:param name="f:kernel" select="'gaussian'"/>
            <x:param name="f:window-size" select="$djb:window-size"/>
        </x:call>
        <x:expect label="desending Gaussian values (n = window-size + 1)"
            select="
                1, 
                0.9801986733067553, 
                0.9231163463866358, 
                0.835270211411272, 
                0.7261490370736909, 
                0.6065306597126334, 
                0.4867522559599717, 
                0.37531109885139957, 
                0.27803730045319414, 
                0.19789869908361465, 
                0.1353352832366127, 
                0.08892161745938634, 
                0.056134762834133725, 
                0.034047454734599344, 
                0.019841094744370288, 
                0.011108996538242306, 
                0.005976022895005943, 
                0.0030887154082367687
                "
        />
    </x:scenario>

    <!--    <x:scenario label="Scenarios for testing function weighted-average">
        <x:variable name="djb:window-size" as="xs:integer" select="3"/>
        <x:variable name="djb:input-values" as="xs:double+" select="1, 2, 3, 4, 5"/>
        <x:variable name="djb:weights" as="xs:double+"
            select="
            1, 
            0.9801986733067553, 
            0.9231163463866358, 
            0.835270211411272, 
            0.7261490370736909, 
            0.6065306597126334, 
            0.4867522559599717, 
            0.37531109885139957, 
            0.27803730045319414, 
            0.19789869908361465, 
            0.1353352832366127, 
            0.08892161745938634, 
            0.056134762834133725, 
            0.034047454734599344, 
            0.019841094744370288, 
            0.011108996538242306, 
            0.005976022895005943, 
            0.0030887154082367687
            "/>
        <x:call function="djb:weighted-average"/>
        <x:scenario label="at right edge of sequence">
            <x:call>
                <x:param name="f:focus" select="5"/>
                <x:param name="f:window-size" select="$djb:window-size"/>
                <x:param name="f:input-values" select="$djb:input-values"/>
                <x:param name="f:weights" select="$djb:weights"/>
            </x:call>
            <x:expect label="Weighted values as xs:double" select="4.026481333610668"/>
        </x:scenario>
        <x:scenario label="in middle of sequence">
            <x:call>
                <x:param name="f:focus" select="3"/>
                <x:param name="f:window-size" select="$djb:window-size"/>
                <x:param name="f:input-values" select="$djb:input-values"/>
                <x:param name="f:weights" select="$djb:weights"/>
            </x:call>
            <x:expect label="Weighted values as xs:double" select="2.9999999999999996"/>
        </x:scenario>
    </x:scenario>-->

    <x:scenario label="Scenario for testing function get-weighted-points">
        <x:variable name="djb:points" as="xs:string+"
            select="
            for-each-pair(
            (50, 100, 150, 200, 250, 300, 350, 400, 450),
            (182, 166, 87, 191, 106, 73, 60, 186, 118),
            function ($a, $b) {
            string-join(($a, -1 * $b), ',')
            }
            )"/>
        <x:call function="djb:get-weighted-points"/>
        <x:scenario label="with gaussian kernel">
            <x:call>
                <x:param name="f:points" as="xs:string+" select="$djb:points"/>
                <x:param name="f:kernel" as="xs:string" select="'gaussian'"/>
                <x:param name="f:window-size" as="xs:integer" select="3"/>
                <x:param name="f:stddev" as="xs:double" select="5"/>
            </x:call>
            <x:expect label="should return adjusted points as sequence of strings"
                select="
                '50,-146.39269215417212',
                '100,-145.14046352967915',
                '150,-147.5919868899796', 
                '200,-128.42139058903746',
                '250,-123.21739518185211',
                '300,-79.62207506994312',
                '350,-106.02342173610471',
                '400,-121.76587182155168', 
                '450,-122.51647913005985'
                "
            />
        </x:scenario>
        <x:scenario label="with rectangular kernel">
            <x:call>
                <x:param name="f:points" as="xs:string+" select="$djb:points"/>
                <x:param name="f:kernel" as="xs:string" select="'rectangular'"/>
                <x:param name="f:window-size" as="xs:integer" select="3"/>
                <x:param name="f:stddev" as="xs:double" select="5"/>
            </x:call>
            <x:expect label="should return adjusted points as sequence of strings"
                select="
                '50,-145', 
                '100,-145', 
                '150,-148', 
                '200,-128', 
                '250,-123.33333333333333', 
                '300,-79.66666666666667', 
                '350,-106.33333333333333', 
                '400,-121.33333333333333', 
                '450,-121.33333333333333'
                "
            />
        </x:scenario>
        <x:scenario label="with exponential kernel">
            <x:call>
                <x:param name="f:points" as="xs:string+" select="$djb:points"/>
                <x:param name="f:kernel" as="xs:string" select="'exponential'"/>
                <x:param name="f:window-size" as="xs:integer" select="3"/>
                <x:param name="f:stddev" as="xs:double" select="5"/>
            </x:call>
            <x:expect label="should return adjusted points as sequence of strings"
                select="
                '50,-163.85714285714286', 
                '100,-150.25', 
                '150,-132.75', 
                '200,-143.75', 
                '250,-119', 
                '300,-78', 
                '350,-94.75', 
                '400,-137.5', 
                '450,-129.14285714285714'
                "
            />
        </x:scenario>
        <x:scenario label="with parabolic-up kernel">
            <x:call>
                <x:param name="f:points" as="xs:string+" select="$djb:points"/>
                <x:param name="f:kernel" as="xs:string" select="'parabolic-up'"/>
                <x:param name="f:window-size" as="xs:integer" select="3"/>
                <x:param name="f:stddev" as="xs:double" select="5"/>
            </x:call>
            <x:expect label="should return adjusted points as sequence of strings"
                select="
                '50,-170.64285714285714', 
                '100,-151.1764705882353', 
                '150,-130.05882352941177', 
                '200,-146.52941176470588', 
                '250,-118.23529411764706', 
                '300,-77.70588235294117', 
                '350,-92.70588235294116', 
                '400,-140.35294117647058', 
                '450,-133.28571428571428'
                "
            />
        </x:scenario>
        <x:scenario label="with parabolic-down kernel">
            <x:call>
                <x:param name="f:points" as="xs:string+" select="$djb:points"/>
                <x:param name="f:kernel" as="xs:string" select="'parabolic-down'"/>
                <x:param name="f:window-size" as="xs:integer" select="3"/>
                <x:param name="f:stddev" as="xs:double" select="5"/>
            </x:call>
            <x:expect label="should return adjusted points as sequence of strings"
                select="
                '50,-154.59090909090907', 
                '100,-145.84', 
                '150,-145.56', 
                '200,-130.52', 
                '250,-122.63999999999999', 
                '300,-79.39999999999999', 
                '350,-104.47999999999999', 
                '400,-123.91999999999999', 
                '450,-129.54545454545453'
                "
            />
        </x:scenario>
        <x:scenario label="with invalid kernel" catch="yes">
            <x:call>
                <x:param name="f:points" as="xs:string+" select="$djb:points"/>
                <x:param name="f:kernel" as="xs:string" select="'no-such-kernel'"/>
                <x:param name="f:window-size" as="xs:integer" select="3"/>
                <x:param name="f:stddev" as="xs:double" select="5"/>
            </x:call>
            <x:expect label="err:description" test="$x:result?err?description"
                select="'Invalid kernel type: no-such-kernel; must be one of: gaussian, rectangular, exponential, parabolic-up, or parabolic-down'"
            />
        </x:scenario>
    </x:scenario>

    <x:scenario label="Scenario for testing function gaussian">
        <x:call function="djb:gaussian">
            <x:param name="f:x" select="5"/>
            <x:param name="f:peak" select="1"/>
            <x:param name="f:mean" select="1"/>
            <x:param name="f:stddev" select="5"/>
        </x:call>
        <x:expect label="Gaussian value for input with parameters" select="0.7261490370736909"/>
    </x:scenario>

    <x:scenario label="Scenarios for testing function round-to-odd">
        <x:call function="djb:round-to-odd"/>
        <x:scenario label="with odd value">
            <x:call>
                <x:param name="input" select="5"/>
            </x:call>
            <x:expect label="Return unchanged" select="5"/>
        </x:scenario>
        <x:scenario label="with even value">
            <x:call>
                <x:param name="input" select="4"/>
            </x:call>
            <x:expect label="Round up to odd" select="5"/>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Scenario for testing function recenter">
        <x:call function="djb:recenter">
            <x:param name="f:input-values" select="1, 2, 3, 4, 5"/>
            <x:param name="f:new-min" select="1"/>
            <x:param name="f:new-max" select="10"/>
        </x:call>
        <x:expect label="Recenters input range" select="1, 3.25, 5.5, 7.75, 10"/>
    </x:scenario>

    <x:scenario label="Scenario for testing function expand-to-tenths">
        <x:call function="djb:expand-to-tenths">
            <x:param name="f:half" select="2"/>
        </x:call>
        <x:expect label="-2 to 2 by tenths"
            select="-2, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2"
        />
    </x:scenario>

    <x:scenario label="Scenarios for testing function uniform">
        <x:call function="djb:uniform"/>
        <x:scenario label="with uniform true values">
            <x:call>
                <x:param name="f:seq" select="true(), true(), true()"/>
            </x:call>
            <x:expect label="Uniform true Booleans return true" select="true()"/>
        </x:scenario>
        <x:scenario label="with uniform false values">
            <x:call>
                <x:param name="f:seq" select="false(), false(), false()"/>
            </x:call>
            <x:expect label="Uniform false Booleans return true" select="true()"/>
        </x:scenario>
        <x:scenario label="with mixed values">
            <x:call>
                <x:param name="f:seq" select="false(), true(), false()"/>
            </x:call>
            <x:expect label="Mixed Booleans return false" select="false()"/>
        </x:scenario>
    </x:scenario>

</x:description>
